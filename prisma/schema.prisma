// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  email     String        @unique
  password  String
  role      Roles         @default(USER)
  verified  Boolean       @default(false)
  status    AccountStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  reviews   Review[]
  comments  Comment[]
  OTP       Otp?
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  published  Boolean   @default(false)
  author     User?     @relation(fields: [authorId, authorName], references: [id, firstname], onDelete: Cascade, onUpdate: Cascade)
  authorId   String
  rating     Int       @default(0)
  likes      Int       @default(0)
  authorName String?
  comments   Comment[]
  realtorsId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Realtors   Realtors? @relation(fields: [realtorsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  author     User?    @relation(fields: [authorId, authorName], references: [id, firstname], onDelete: Cascade, onUpdate: Cascade)
  authorId   String
  authorName String
  review     Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId   String   @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

}

model Realtors {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  agenttype        String
  companyName      String?
  firstname        String
  lastname         String
  registrationdate String
  averageRating    Float    @default(0)
  reviews          Review[]
  faction          String
  Company          Company? @relation(fields: [companyId, companyName], references: [id, name], onDelete: Cascade, onUpdate: Cascade)
  companyId        String?  @db.ObjectId
}

model Company {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  address  String
  agents   Realtors[]
  city     String
  name     String
  zip_code String
}

model Otp {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id] ,onDelete: Cascade, onUpdate: Cascade)
  expires BigInt 
  userId String @db.ObjectId
}

enum Roles {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  PENDING
  BANNED
  DELETED
}
